<?php

namespace PhpParser\Parser;

use PhpParser\Comment;
use PhpParser\Error;
use PhpParser\Node;
use PhpParser\Node\Expr;
use PhpParser\Node\Name;
use PhpParser\Node\Scalar;
use PhpParser\Node\Stmt;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar files grammar/php5.y or grammar/php7.y
 *  * the skeleton file gramar/parser.template
 *  * the preprocessing script grammar/rebuildParsers.php
 */
class Php5 extends \PhpParser\ParserAbstract
{
    protected $tokenToSymbolMapSize = 392;
    protected $actionTableSize = 1389;
    protected $gotoTableSize = 596;

    protected $invalidSymbol = 159;
    protected $errorSymbol = 1;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 423;
    protected $YYNLSTATES   = 670;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "T_DOUBLE_ARROW",
        "T_YIELD_FROM",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_COMMENT",
        "T_DOC_COMMENT",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
    );

    protected $tokenToSymbol = array(
            0,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,   53,  158,  159,  155,   52,   35,  159,
          153,  154,   50,   47,    7,   48,   49,   51,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,   29,  150,
           41,   15,   43,   28,   65,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,   67,  159,  157,   34,  159,  156,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  151,   33,  152,   55,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
          159,  159,  159,  159,  159,  159,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   13,   14,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           27,   30,   31,   32,   36,   37,   38,   39,   40,   42,
           44,   45,   46,   54,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   66,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,   80,   81,  159,  159,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  136,  137,  138,  139,  159,  159,
          159,  159,  140,  141,  142,  143,  144,  145,  146,  147,
          148,  149
    );

    protected $action = array(
          815,   70,   71,  438,   72,   73,   64,  756,  757,  385,
           74,   75, 1191,   76,  234,  235,  236,  237,  238,  239,
          240,  241,  242,  145,  243,  244,  245,  246,  247,  248,
          249,  250,  251,  252,  253,  254,-32766,-32766,-32766,-32766,
        -32766,-32767,-32767,-32767,-32767,    0,   77,   78,   35,  255,
          256,   45,   79,  425,   80,  309,  310,   81,   82,   83,
           84,   85,   86,   87,   88,  374,   42,  317,   89,  431,
          439,  300,   49,  312, 1077, 1078,  481,  315, 1170,  592,
          804,  316,  482,   56,   27,  440,  639,  483,  344,  484,
          134,  485,   68, 1203,  441, 1205, 1204,  366,   46,   47,
          486,  442,  430,   48,  487,  488,  489,   90, 1200,   67,
          367,  368,  883,  884,  785,  831,  493,  494,  490,  491,
          492,  935,  936,  937,  934,  933,  932,  510,  495,  496,
          443, 1083, 1084, 1085, 1086, 1080, 1081, 1131, 1132,  325,
        -32766,-32766,-32766,-32766,  510, 1087, 1082,  443,  352,  810,
          642,  437,   57,  339,  350,  336,  356,  337,  674,  675,
          676,  677,  678,  859,  679,  680,  681,  717,  718,-32766,
        -32766,-32766,-32766,-32766,-32766,  495,  138,  324,   51,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  909,-32766,  136,-32766,-32766,-32766,-32766,-32766,-32766,
        -32767,-32767,-32767,-32767,-32767,  252,  253,  254,  801,   41,
          682,  231,  232,  233,-32766,-32766,-32766,  561, 1177,  965,
          967,  255,  256,  458,  683,  684,  685,  686,  687,  688,
          689,  218,  259,  740,-32766,   -1,-32766,-32766,-32766,-32766,
          690,  691,  692,  693,  694,  695,  696,  697,  698,  699,
          700,  720,  721,  722,  723,  724,  712,  713,  714,  715,
          716,  701,  702,  703,  704,  705,  706,  707,  734,  735,
          736,  737,  738,  739,  708,  709,  710,  711,  298,  732,
          730,  731,  727,  728,  860,  719,  725,  726,   94,   95,
           96, -486,  465,  117,  118,  119,  147,  319, 1044,-32766,
          589,  729,-32766,-32766,-32766,-32766,-32766,   65,   50,  120,
           97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
          107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
          117,  118,  119,  313,  319,  226,  227,  742,  432, 1170,
         1164,  228,  510,  229,  335,  443,  120,  222,  488,  489,
          883,  884,-32766,-32766,-32766,  220,  890,  748,  831,  493,
          494,  139,  899, 1077, 1078,  510,  755,-32766,  443,-32766,
        -32766, 1079, 1054,  459, -207,  742,  114,  115,  116,-32766,
          349, 1026,-32766,-32766,-32766,  536,-32766,  456,-32766, 1170,
        -32766,  135,  631,-32766,  231,  232,  233,-32766,-32766,-32766,
          446,  478,-32766,-32766,  313,  510,-32766,-32766,  443,-32766,
          509, 1164,  143,  447,  218,  350,  357,-32766,  579, -203,
         1083, 1084, 1085, 1086, 1080, 1081,  232,  233,  401,  249,
          250,  251,-32766,-32766, 1087, 1082,-32766,-32766,  302,   22,
        -32766,  230,  433,-32766, 1089,  218,  742,  142,-32766,-32766,
        -32766,-32766,  889,-32766,-32766,-32766,  224,-32766, 1174,-32766,
          632,-32766, 1026,  443,-32766,  350,  647,  913,-32766,-32766,
        -32766,  446,-32766,-32766,-32766,  452,  137,-32766,  644,  141,
        -32766,  509,   52,-32766,-32766,-32766,  645,  357,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,  133,-32767,
        -32767,-32767,-32767,-32766,  432,-32766,-32766,-32766,-32766,  457,
          335,  654,-32766,-32766,  488,  489,  802, -202,  142,-32766,
        -32766,-32766,-32766,  748,  831,  493,  494,  742,  231,  232,
          233,-32766,  144, 1026,-32766,-32766,-32766,  659,-32766,  446,
        -32766,  666,-32766, 1127,  908,-32766,  349,  218,  218,-32766,
        -32766,-32766,  446,  751,-32766,-32766,  488,  489,-32766,  446,
          598,-32766,  509,  223,  233,  785,  831,  493,  494,-32766,
          262,  231,  232,  233,  261,  432,  257,  255,  256,  467,
           28,  335,  218,  260,  446,  488,  489,  225,-32766,-32766,
          663,  218,-32766,-32766,  748,  831,  493,  494,  742,  395,
        -32766,-32766,-32766,  146, 1026,-32766,-32766,-32766,  326,-32766,
          446,-32766,  814,-32766,  446,  658,-32766,  349,-32766, 1089,
        -32766,-32766,-32766,  446,  750,-32766,-32766,  301,  317,-32766,
          824, -256,-32766,  509,  319,   34,  231,  232,  233,  120,
        -32766,  347,  488,  489,  935,  936,  937,  934,  933,  932,
          927,  785,  831,  493,  494,-32766,  218,  472,  604,-32766,
        -32766,-32766,  455,-32766,-32766, -196, -196, -196,   61,  742,
        -32766,-32766,-32766,-32766, 1128, 1026,-32766,-32766,-32766,   66,
        -32766,  818,-32766,   62,-32766,  148,  375,-32766,-32766,-32766,
        -32766,-32766,-32766,-32766,  446,  617,-32766,-32766,  311,   69,
        -32766,  756,  757,-32766,  509,   60,  488,  489,-32766,  611,
          612,-32766,  749,  649,   63,  785,  831,  493,  494,-32767,
        -32767,-32767,-32767,  112,  113,  114,  115,  116,  924,  669,
        -32766,-32766,  912,  662,-32766,-32766, -198, -198, -198,   59,
          742,  534,-32766,-32766,-32766,  551, 1026,-32766,-32766,-32766,
          550,-32766,  530,-32766,  453,-32766,  451,  607,-32766, 1198,
          742,  743,-32766,-32766,-32766,  446,  535,-32766,-32766,  314,
          531,-32766,  769, 1047,-32766,  509,  630,  488,  489,  624,
          614,  541,-32766,  595,  488,  489,  785,  831,  493,  494,
        -32766,  348,  553,  785,  831,  493,  494,  -70,  488,  489,
           39,-32766,-32766,  297,  450,-32766,-32766,  785,  831,  493,
          494,  742,  476,-32766,-32766,-32766,  446,  351,-32766,-32766,
        -32766,  608,-32766,  925,-32766,  495,-32766,  832,  833,-32766,
           36, 1136, -394,-32766,-32766,-32766,  446,  652,-32766,-32766,
          488,  489,-32766,  345,  338,-32766,  509,  346, 1088,  785,
          831,  493,  494,-32766,  340,  488,  489, -487, -486,  488,
          489,  402, -385,   30,  785,  831,  493,  494,  785,  831,
          493,  494,-32766,-32766,  826,  388,-32766,-32766,  862,  786,
           38,   31,  742, -393,-32766,-32766,-32766, 1199, 1026,-32766,
        -32766,-32766,  426,-32766,  827,-32766,  403,-32766, 1028,  411,
        -32766,  452,  543,  427,-32766,-32766,-32766,  446,  629,-32766,
        -32766,  488,  489,-32766,  390,  651,-32766,  509,  753,  752,
          785,  831,  493,  494,-32766,  796,  488,  489,  916,  803,
          488,  489,  794,   54,  805,  785,  831,  493,  494,  785,
          831,  493,  494,-32766,-32766,  798,  853,-32766,  668,  812,
          820,  854,-32766,  742,   55,-32766,-32766,-32766,  917, 1070,
        -32766,-32766,-32766, 1026,-32766, 1029,-32766,   93,-32766,  920,
          919,-32766,  843,  845,  847,-32766,-32766,-32766,  446,  788,
        -32766,-32766,  650,  918,-32766,  754,  799,-32766,  509,  813,
          790, -187, -187, -187,  806,-32766,  140,  342,  343,  423,
          424,  667,  665,  664,  661,  656,  655,  653,  488,  489,
          648,  643,   25,  828,-32766,-32766, 1171,  785,  831,  493,
          494, 1169,-32766,-32766,  471, 1155,-32766,-32766,  742,  760,
          761, 1167,-32766,  638, 1026,-32766,-32766,-32766, 1068,-32766,
         1040,-32766,  851,-32766,  852,  901,-32766, -187,  758,  759,
        -32766,-32766,-32766,  446,  621,-32766,-32766,  488,  489,-32766,
         1175, 1165,-32766,  509, 1201, 1202,  785,  831,  493,  494,
        -32766,  830,  829, 1024,  488,  489,  320,   43,   44,  308,
          307,  299,  221,  785,  831,  493,  494,-32766,   40,-32766,
        -32766,   58,   92,-32766,-32766,   91,-32766,-32766,-32766,  742,
          435,  793,-32766,-32766, 1030, 1026,-32766,-32766,-32766,  429,
        -32766,  353,-32766,  323,-32766,  322,-32766,-32766,-32766,-32766,
        -32766,-32766,-32766,-32766,  446,  321,-32766,-32766,   53, -403,
        -32766,  583, 1005,-32766,  509, 1093,  891, 1034, 1031,  636,
          574,-32766,  479,  475,  473,  468,  396, 1006,   24,   23,
         -203, -204,    0,    0,    0, 1035, 1150,  615, 1154, 1166,
        -32766,-32766, 1149, 1094,-32766,-32766, 1197, 1067, 1036, 1039,
          742, 1037,  795,-32766,-32766, 1038, 1053,-32766,-32766,-32766,
         1168,-32766, 1135,-32766,    0,-32766,    0,    0,-32766,    0,
            0,    0,-32766,-32766,-32766,  446,    0,-32766,-32766,    0,
            0,-32766,    0,    0,-32766,  509,    0,    0,    0,    0,
            0,    0,-32766,    0,-32766,-32766,-32766,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,-32766,-32766,    0,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,  742,    0,  797,-32766,-32766,    0,    0,-32766,-32766,
        -32766,    0,-32766,    0,-32766,    0,-32766,    0,    0,-32766,
            0,    0,  258,-32766,-32766,-32766,  446,    0,-32766,-32766,
            0,    0,-32766,    0,    0,-32766,  509,    0,    0,    0,
          226,  227,    0,-32766,    0,    0,  228,    0,  229,    0,
            0,    0,    0, -188, -188, -188,    0,    0,    0,    0,
          220,    0,-32766,-32766,-32766,-32766,-32766,    0, 1077, 1078,
          488,  489,-32766,    0,-32766,-32766, 1079,    0,    0,  785,
          831,  493,  494,    0,-32766,    0,-32766,-32766,-32766,-32766,
        -32766,-32766,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0, -188,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  579,    0, 1083, 1084, 1085, 1086, 1080,
         1081,    0,    0,  401,    0,    0,    0,    0,    0, 1087,
         1082,    0,    0,    0,    0,    0,  230,    0,-32766
    );

    protected $actionCheck = array(
            1,    2,    3,    4,    5,    6,   67,  102,  103,   79,
           11,   12,   82,   14,   31,   32,   33,   34,   35,   36,
           37,   38,   39,   67,   41,   42,   43,   44,   45,   46,
           47,   48,   49,   50,   51,   52,   31,   32,   33,   34,
           35,   36,   37,   38,   39,    0,   47,   48,    7,   66,
           67,    7,   53,  148,   55,   56,   57,   58,   59,   60,
           61,   62,   63,   64,   65,    7,   67,   68,   69,   70,
           71,    7,  142,  143,   75,   76,   77,    7,   79,   87,
           81,   35,   83,   84,   85,   86,   77,   88,    7,   90,
          151,   92,   67,   77,   95,   79,   80,    7,   99,  100,
          101,  102,    7,  104,  105,  113,  114,  108,  152,   67,
          111,  112,  130,  131,  122,  123,  124,  125,  119,  120,
          121,  112,  113,  114,  115,  116,  117,  145,  129,  130,
          148,  132,  133,  134,  135,  136,  137,  138,  139,  140,
           31,   32,   33,   34,  145,  146,  147,  148,    7,  150,
          151,    7,  153,  128,  155,  156,   67,  158,    2,    3,
            4,    5,    6,   29,    8,    9,   10,   11,   12,    8,
            9,   10,    8,    9,   10,  129,  151,    7,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           27,  150,   28,  151,   30,   31,   32,   33,   34,   35,
           36,   37,   38,   39,   40,   50,   51,   52,  150,    7,
           54,    8,    9,   10,    8,    9,   10,  128,  154,   56,
           57,   66,   67,    7,   68,   69,   70,   71,   72,   73,
           74,   28,   29,   77,   28,    0,   30,   31,   32,   33,
           84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
           94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
          104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
          114,  115,  116,  117,  118,  119,  120,  121,   13,  123,
          124,  125,  126,  127,  150,  129,  130,  131,    8,    9,
           10,  128,    7,   50,   51,   52,  151,   54,  154,    1,
          155,  145,   31,   32,   33,   34,   35,   67,   28,   66,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,   35,   54,   47,   48,   77,  103,   79,
           79,   53,  145,   55,  109,  148,   66,    7,  113,  114,
          130,  131,   31,   32,   33,   67,  154,  122,  123,  124,
          125,    7,   79,   75,   76,  145,  150,   79,  148,   71,
            1,   83,  112,    7,  154,   77,   47,   48,   49,   81,
          145,   12,   84,   85,   86,   82,   88,   29,   90,   79,
           92,  151,   77,   95,    8,    9,   10,   99,  100,  101,
          102,    7,  104,  105,   35,  145,  108,    8,  148,  111,
          112,   79,  151,  153,   28,  155,  155,  119,  130,  154,
          132,  133,  134,  135,  136,  137,    9,   10,  140,   47,
           48,   49,    8,    9,  146,  147,  138,  139,  155,  154,
           71,  153,  123,  155,  141,   28,   77,  149,  150,  151,
           81,    1,  154,   84,   85,   86,   15,   88,   77,   90,
          145,   92,   12,  148,   95,  155,   29,  152,   99,  100,
          101,  102,  153,  104,  105,  148,   13,  108,  151,   29,
          111,  112,   13,    8,    9,   10,   29,  155,  119,   31,
           32,   33,   34,   35,   36,   37,   38,   39,   15,   41,
           42,   43,   44,   28,  103,   30,   31,  138,  139,  151,
          109,   29,   31,   32,  113,  114,  150,   74,  149,  150,
          151,   71,    1,  122,  123,  124,  125,   77,    8,    9,
           10,   81,  151,   12,   84,   85,   86,   29,   88,  102,
           90,   29,   92,  157,  150,   95,  145,   28,   28,   99,
          100,  101,  102,  152,  104,  105,  113,  114,  108,  102,
           82,  111,  112,   15,   10,  122,  123,  124,  125,  119,
           15,    8,    9,   10,   15,  103,   13,   66,   67,   72,
           73,  109,   28,   15,  102,  113,  114,   15,  138,  139,
           29,   28,   71,    1,  122,  123,  124,  125,   77,   78,
          150,  151,   81,   29,   12,   84,   85,   86,   29,   88,
          102,   90,   29,   92,  102,   29,   95,  145,   31,  141,
           99,  100,  101,  102,  152,  104,  105,   35,   68,  108,
           35,   79,  111,  112,   54,  103,    8,    9,   10,   66,
          119,  109,  113,  114,  112,  113,  114,  115,  116,  117,
          118,  122,  123,  124,  125,  103,   28,   72,   73,  138,
          139,  109,   86,   71,    1,   72,   73,   74,   67,   77,
          118,  150,  151,   81,  154,   12,   84,   85,   86,   67,
           88,  152,   90,   67,   92,   97,   98,   95,    8,    9,
           10,   99,  100,  101,  102,   74,  104,  105,   35,   67,
          108,  102,  103,  111,  112,   67,  113,  114,   28,  106,
          107,  119,  150,  151,   67,  122,  123,  124,  125,   41,
           42,   43,   44,   45,   46,   47,   48,   49,  150,  151,
          138,  139,  150,  151,   71,    1,   72,   73,   74,   67,
           77,   79,  150,  151,   81,   77,   12,   84,   85,   86,
           77,   88,   77,   90,   77,   92,   77,   96,   95,   77,
           77,   77,   99,  100,  101,  102,   77,  104,  105,   35,
           77,  108,   77,   79,  111,  112,   79,  113,  114,   79,
           79,   82,  119,   96,  113,  114,  122,  123,  124,  125,
           82,  110,   94,  122,  123,  124,  125,   94,  113,  114,
           94,  138,  139,   94,  102,   71,    1,  122,  123,  124,
          125,   77,  102,  150,  151,   81,  102,  126,   84,   85,
           86,  109,   88,  152,   90,  129,   92,  123,  123,   95,
          144,  141,  144,   99,  100,  101,  102,  152,  104,  105,
          113,  114,  108,  126,  128,  111,  112,  127,  141,  122,
          123,  124,  125,  119,  128,  113,  114,  128,  128,  113,
          114,  148,  144,  144,  122,  123,  124,  125,  122,  123,
          124,  125,  138,  139,  149,  144,   71,    1,  150,  152,
          144,  144,   77,  144,  150,  151,   81,  152,   12,   84,
           85,   86,  148,   88,  152,   90,  148,   92,  152,  148,
           95,  148,  148,  148,   99,  100,  101,  102,   91,  104,
          105,  113,  114,  108,  148,  150,  111,  112,  150,  150,
          122,  123,  124,  125,  119,  150,  113,  114,  150,  150,
          113,  114,  150,  150,  150,  122,  123,  124,  125,  122,
          123,  124,  125,  138,  139,  150,  150,   71,  151,  150,
          152,  150,    1,   77,  150,  150,  151,   81,  150,  154,
           84,   85,   86,   12,   88,  152,   90,  151,   92,  150,
          150,   95,  150,  150,  150,   99,  100,  101,  102,  150,
          104,  105,  150,  150,  108,  150,  150,  111,  112,  150,
          150,   96,   97,   98,  150,  119,  151,  151,  151,  151,
          151,  151,  151,  151,  151,  151,  151,  151,  113,  114,
          151,  151,  154,  152,  138,  139,  152,  122,  123,  124,
          125,  152,   71,    1,  152,  152,  150,  151,   77,  152,
          152,  152,   81,   89,   12,   84,   85,   86,  152,   88,
          152,   90,  152,   92,  152,  152,   95,  152,  152,  152,
           99,  100,  101,  102,   93,  104,  105,  113,  114,  108,
          152,  152,  111,  112,  152,  152,  122,  123,  124,  125,
          119,  152,  152,  156,  113,  114,  153,  153,  153,  153,
          153,  153,  153,  122,  123,  124,  125,  153,  153,  138,
          139,  153,  153,   71,    1,  153,    8,    9,   10,   77,
          153,  150,  151,   81,  154,   12,   84,   85,   86,  153,
           88,  153,   90,  153,   92,  153,   28,   95,   30,   31,
           32,   99,  100,  101,  102,  153,  104,  105,  153,  156,
          108,  154,  154,  111,  112,  154,  154,  154,  154,  154,
          154,  119,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,   -1,   -1,   -1,  157,  157,  157,  157,  157,
          138,  139,  157,  157,   71,    1,  157,  157,  157,  157,
           77,  157,  150,  151,   81,  157,  157,   84,   85,   86,
          157,   88,  158,   90,   -1,   92,   -1,   -1,   95,   -1,
           -1,   -1,   99,  100,  101,  102,   -1,  104,  105,   -1,
           -1,  108,   -1,   -1,  111,  112,   -1,   -1,   -1,   -1,
           -1,   -1,  119,   -1,    8,    9,   10,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,  138,  139,   -1,   28,   71,   30,   31,   32,   33,
           34,   77,   -1,  150,  151,   81,   -1,   -1,   84,   85,
           86,   -1,   88,   -1,   90,   -1,   92,   -1,   -1,   95,
           -1,   -1,   29,   99,  100,  101,  102,   -1,  104,  105,
           -1,   -1,  108,   -1,   -1,  111,  112,   -1,   -1,   -1,
           47,   48,   -1,  119,   -1,   -1,   53,   -1,   55,   -1,
           -1,   -1,   -1,   96,   97,   98,   -1,   -1,   -1,   -1,
           67,   -1,  138,  139,    8,    9,   10,   -1,   75,   76,
          113,  114,   79,   -1,  150,  151,   83,   -1,   -1,  122,
          123,  124,  125,   -1,   28,   -1,   30,   31,   32,   33,
           34,   35,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  152,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,  130,   -1,  132,  133,  134,  135,  136,
          137,   -1,   -1,  140,   -1,   -1,   -1,   -1,   -1,  146,
          147,   -1,   -1,   -1,   -1,   -1,  153,   -1,  155
    );

    protected $actionBase = array(
            0, 1197,  895,  235,  401,  593,  472,  664,  727,  685,
           -8,  961,  443,  817,  798,  742,  746,  944,  813,  529,
          671,  437,  482,  508,  512,  508,  457,  714,  714,  714,
          261,  261,  315,  833,  156,  156,  156,  156,  156,    9,
          298,  369,  663,  663,  805,  663,  951, 1022, 1093,  521,
          450,  592,  734,  876,  876,  876,  876, 1164, 1164,  876,
          876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
          876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
          876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
          876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
          876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
          876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
          876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
          876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
          876,  876,  876,  876,  876,  876,  876,  876,  876,  134,
          784,  463,  469,  782,  775,  795,  799,  950,  709,  993,
          735,  864,  574,  869,  873,  879,  886,  893,  872,  908,
         1000,  909,  280,  280,  280,  280,  280,  280,  280,  280,
          280,  280,  280,  399,  563,  520,  203,  386,  424,  628,
          628,  628,  628,  628,  628,  628,  161,  161,  161,  161,
          161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
          161,  161,  161,  417,  680,  680,  680,  554, 1233,  519,
          288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
          288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
          288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
          288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
          288,  288,  288,  475,  -17,  -17, 1088,  587,  206,  481,
         1206,  321, 1296,  164,  164,  164,  164,  164,  109,  271,
            5,    5,    5,    5,  163,  678,  678,  678,  678,  458,
          458,  458,  458,  919,  920,  861,  888,   46,   46,  696,
          696,  560,  845,  329,  329,  382,  382,  260,  260,  260,
          260,  260,  260,  260,  260,  260,  260,  319,  552,  934,
          220,  220,  220,  220,  -18,  303,  -18,  690, 1024,  243,
          243,  243,  155,  155,  155,  -95,  699,  -70,  381,  381,
          381,  -70,  599,  599,  599,  197,  197,  197,  197,  327,
          816,  197,  197,  197,  240,  708,   16,  145,  687,  890,
          661,  892,  582,  688,   25,  744,  755,  283,  702,  507,
          585,  603,  718,  358,  283,  134,  578,   42,  580,  779,
          668,  216,  769,   58,  366,   89,  562,  -61,  332,  285,
          846,  768,  977,  978,   64,  -44,  729,  580,  580,  580,
          202,  478,  847,  848,  -61,  265,  511,  511,  511,  511,
          877,  849,  511,  511,  511,  511,  878,  896,   41,  394,
          897,  144,  778,  683,  683,  683,  683,  683,  683,  595,
          683,  925,  693,  935,  935,  673,  701,  595,  938,  938,
          938,  938,  595,  683,  935,  935,  595,  560,  935,   44,
          595,  717,  683,  691,  691,  938,  832,  765,  693,  662,
          720,  935,  935,  935,  720,  673,  595,  938,  712,  725,
          340,  935,  938,  579,  579,  712,  595,  579,  701,  579,
           45,  583,  672,  975,  942,  947,  675,  860,  704,  705,
          927,  926,  939,  689,  679,  928,  924,  754,  835,  836,
          677,  483,  638,  601,  616,  647,  719,  612,  716,  702,
          753,  573,  573,  573,  730,  737,  730,  573,  573,  573,
          573,  573,  573,  573,  573,  998,  731,  739,  726,  576,
          839,  548,  766,  698,  441,  859,  707,  754,  754,  984,
          992,  973,  917,  684,  923,  986,  730, 1014,  783,  354,
          572,  972,  713,  695,  748,  730,  962,  730,  856,  730,
          983,  682,  913,  754,  573,  982, 1011, 1012, 1018, 1019,
         1023, 1001,  999, 1002,  632, 1010,  840,  991,  170,  929,
          718,  686,  751,  844,  141, 1009,  730,  730,  855,  816,
          730,  854,  728,  804,  995,  796,  990, 1006,  707,  989,
          730,  710, 1005,  141,  586,  621,  997,  801,  956,  700,
          981,  958,  853,  568,  559,  912,  561,  829,  994,  858,
          996,  824,  852,  851,  555,  694,  697,  850,  960,  823,
          985,  703,  753,  736,  681,  706,  797,  988,  822,  820,
          819,  808,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
          156,  156,  156,  156,    0,    0,    0,    0,    0,  156,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,
          280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
          280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
          280,  280,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  280,  -17,  -17,  -17,  -17,  280,  -17,
          -17,  -17,  -17,  -17,  -17,  -17,  280,  280,  280,  280,
          280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
          280,  280,  280,  -17,  280,  280,  280,  -17,  260,  -17,
          260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
          260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
          260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
          260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
          260,  260,  260,  280,    0,    0,  280,  -17,  280,  -17,
          280,  -17,  280,  280,  280,  280,  280,  280,  -17,  -17,
          -17,  -17,  -17,  -17,    0,  243,  243,  243,  243,  -17,
          -17,  -17,  -17,  532,  532,  532,  532,  260,  260,  260,
          260,  260,  260,  243,  243,  155,  155,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,  260,  532,  260,
          683,  683,  683,  683,  683,  -70,  683,  -70,  -70,    0,
            0,    0,    0,    0,    0,  683,  -70,    0,  310,  310,
          310,    0,  683,  683,  683,  683,  683,  683,  683,  683,
          310,  683,  683,  683,  935,  -70,    0,  310,  588,  588,
          588,  588,  141,  -61,    0,  683,  683,    0,  662,    0,
            0,    0,  935,    0,    0,    0,    0,    0,  573,  354,
          923,    0,   90,    0,    0,    0,    0,    0,    0,    0,
          684,   90,   70,   70,    0,    0,  632,  573,  573,  573,
            0,    0,  684,  684,    0,    0,    0,    0,    0,    0,
           81,  684,    0,    0,    0,    0,   81,   95,    0,    0,
           95,    0,  141
    );

    protected $actionDefault = array(
            3,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  513,  513,32767,  470,32767,32767,32767,32767,
        32767,32767,32767,  274,  274,  274,32767,32767,32767,  502,
          502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
        32767,32767,32767,32767,32767,  356,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  362,  518,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  337,  338,  340,  341,  273,  503,  224,  363,
          517,  272,  226,  301,  474,32767,32767,32767,  303,  106,
          235,  180,  473,  109,  271,  211,  355,  357,  302,  278,
          283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
          293,  294,  277,  428,  334,  333,  332,  430,32767,  429,
          467,  467,  470,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,  299,  456,  455,  300,  426,  304,  427,
          306,  431,  305,  322,  323,  320,  321,  324,  433,  432,
          449,  450,  447,  448,  276,  325,  326,  327,  328,  451,
          452,  453,  454,  258,  258,  258,  258,32767,32767,  512,
          512,32767,32767,  313,  314,  440,  441,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  259,32767,
          215,  215,  215,  215,  215,32767,32767,32767,32767,  308,
          309,  307,  435,  436,  434,32767,  402,32767,32767,32767,
        32767,  404,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,  475,32767,32767,32767,32767,32767,
        32767,32767,32767,  488,  391,32767,32767,32767,  384,  199,
          201,  149,  459,32767,32767,32767,32767,  493,  318,32767,
        32767,32767,32767,32767,32767,  526,32767,  488,32767,32767,
        32767,32767,32767,32767,32767,32767,  331,  310,  311,  312,
        32767,32767,32767,32767,  492,  486,  443,  444,  445,  446,
        32767,32767,  437,  438,  439,  442,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  153,
        32767,  399,32767,  405,  405,32767,32767,  153,32767,32767,
        32767,32767,  153,32767,  491,  490,  153,32767,  385,  469,
          153,  166,32767,  164,  164,32767,  185,  185,32767,32767,
          168,  460,  481,32767,  168,32767,  153,32767,  373,  155,
          469,32767,32767,  217,  217,  373,  153,  217,32767,  217,
        32767,   72,  409,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  386,32767,32767,
        32767,32767,  352,  353,  464,  477,32767,  478,32767,  384,
        32767,  316,  317,  319,  296,32767,  298,  342,  343,  344,
          345,  346,  347,  348,  350,32767,32767,  389,  392,32767,
        32767,32767,   74,   98,  234,32767,  521,   74,  387,32767,
          281,  521,32767,32767,32767,32767,  520,32767,32767,  275,
        32767,32767,   74,32767,   74,  230,32767,  151,32767,  510,
        32767,32767,  486,  388,  315,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,  487,32767,32767,32767,  206,32767,
          422,32767,   74,32767,  167,32767,  279,  225,32767,32767,
          519,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          152,32767,32767,  169,32767,32767,  486,32767,32767,32767,
        32767,32767,32767,32767,  270,32767,32767,32767,32767,32767,
          486,32767,32767,32767,  210,32767,32767,32767,32767,32767,
        32767,   72,   59,32767,  252,32767,32767,32767,32767,32767,
        32767,32767,  111,  111,    3,  111,  193,  111,  237,    3,
          185,  185,  146,  237,  111,  237,  237,  111,  111,  111,
          111,  111,  244,  111,  111,  111,  111,  111,  111,  111
    );

    protected $goto = array(
          178,  178,  152,  152,  157,  152,  153,  154,  155,  160,
          162,  199,  180,  176,  176,  176,  176,  157,  157,  177,
          177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
          172,  173,  174,  175,  196,  151,  197,  511,  512,  378,
          513,  517,  518,  519,  520,  521,  522,  523,  524,  952,
          156,  158,  159,  161,  183,  188,  198,  214,  263,  266,
          268,  270,  272,  273,  274,  275,  276,  277,  285,  286,
          287,  288,  303,  304,  329,  330,  331,  397,  398,  399,
          564,  200,  201,  202,  203,  204,  205,  206,  207,  208,
          209,  210,  211,  212,  163,  164,  165,  179,  166,  181,
          167,  215,  182,  168,  169,  170,  216,  171,  149,  633,
          581,  808,  581,  581,  581,  581,  581,  581,  581,  581,
          581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
          581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
          581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
          581,  581,  581,  581,  581, 1090,  777, 1090, 1090, 1090,
         1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
         1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
         1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
         1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
          875,  875, 1181, 1181,   33,  540, 1161,  186, 1161,  527,
          640,  527,  189,  190,  191,  406,  407,  408,  409,  185,
          213,  217,  219,  267,  269,  271,  278,  279,  280,  281,
          282,  283,  289,  290,  291,  292,  305,  306,  332,  333,
          334,  412,  413,  414,  415,  187,  192,  264,  265,  193,
          194,  195,  515,  515,  515,  515,  515,  515,  747,  747,
          359,  747,  515,  515,  515,  515,  515,  515,  515,  515,
          515,  515,  526,  893,  526,  405,  620,  559,  559,  586,
          555,  746,  746,  560,  746,  557,  557,  514,  516,  546,
          562,  587,  590,  600,  606,  580, 1185,  580,  580,  580,
          580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
          580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
          580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
          580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
          566,  567,  568,  569,  570,  571,  572,  573,  575,  602,
          532, 1193, 1193,  593,  618, 1192, 1192,  537,  537,  537,
          461,  463,  923,  641,  537, 1193, 1091,  628,  921, 1192,
          294,  379,  295,  296,  448,  448,  448,  448,  448,  448,
          554,  537,  610, 1195,  448,  448,  448,  448,  448,  448,
          448,  448,  448,  448, 1055, 1141, 1055,  882,  882,  882,
          882,  882,  565,  882,  623,  619,  539,  627, 1178,  376,
          596,  599,  637,  603,  362,  422,  770, 1066, 1065,  539,
          539,  393,  840,  840,  840,  840, 1153,  380,  835,  841,
          626,  544,    4,  999,  528,  556,  528,    6,  537,  537,
          552,  582,  537,  537, 1048,  537,  770,  770,    9,  950,
            5,  469,   10,  360,  361,  341,  328,  879,  538,   11,
          888,   37,    1,   12,   13,    2,   14,  563,    7,   15,
           16,   17,   18,   19,   20,  745,  745,  365,  745,  416,
          386,  766,  764,  931,  897,  391,  657,  420, 1041, 1046,
          464,  774,  849,  861,  846,  844,  842,  844,  646,  529,
          870,  865,  902,  591,  763,  763,  771,  771,  771,  773,
         1138,  762,  477,  939, 1071,    0, 1051, 1052,    0,    0,
         1048, 1009,   26,   21,  373, 1160,    0, 1160,    0,    0,
          387,  387,  387, 1049, 1152, 1049,    0,    0,  576,    0,
            0,    0,  387, 1050,    0,    0, 1176, 1176, 1176,  404,
           29,    0,    0,    0,    0,  616,    0,    0, 1159,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,  545
    );

    protected $gotoCheck = array(
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   51,
          110,   44,  110,  110,  110,  110,  110,  110,  110,  110,
          110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
          110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
          110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
          110,  110,  110,  110,  110,  117,   24,  117,  117,  117,
          117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
          117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
          117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
          117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
           68,   68,   68,   68,   88,   91,  108,   22,  108,  110,
            4,  110,   22,   22,   22,   22,   22,   22,   22,   22,
           22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
           22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
           22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
           22,   22,  107,  107,  107,  107,  107,  107,   11,   11,
           63,   11,  107,  107,  107,  107,  107,  107,  107,  107,
          107,  107,  107,   75,  107,   45,   45,   45,   45,   45,
           45,   10,   10,   99,   10,   45,   45,   45,   45,   45,
           45,   45,   45,   45,   45,   51,  130,   51,   51,   51,
           51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
           51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
           51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
           51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
          100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
            7,  131,  131,   33,   33,  132,  132,    7,    7,    7,
            6,    6,    6,    6,    7,  131,    6,    6,    6,  132,
           59,   41,   59,   59,   51,   51,   51,   51,   51,   51,
            7,    7,  118,  132,   51,   51,   51,   51,   51,   51,
           51,   51,   51,   51,   51,  122,   51,   51,   51,   51,
           51,   51,   37,   51,   55,   43,   37,   55,  128,   55,
           54,   54,   54,   61,   61,   61,   18,  115,  115,   37,
           37,   42,   51,   51,   51,   51,   73,   52,   51,   51,
           51,   52,    2,   92,  113,   52,  113,    2,    7,    7,
            7,    7,    7,    7,   73,    7,   18,   18,   25,   91,
           25,   52,   25,   63,   63,  116,  116,   70,    7,   25,
           72,   52,   25,   25,   25,   25,   25,    7,   25,   25,
           25,   25,   25,   25,   25,    9,    9,   13,    9,   17,
            8,   20,   19,   88,   76,   12,   65,   16,  103,  105,
           57,   21,   62,    9,    9,    9,    9,    9,    9,    9,
            9,    9,   77,   58,   18,   18,   18,   18,   18,   18,
          121,   18,   98,   90,   27,   -1,   73,   73,   -1,   -1,
           73,   27,   27,   27,   27,  109,   -1,  109,   -1,   -1,
          114,  114,  114,   73,   73,   73,   -1,   -1,   27,   -1,
           -1,   -1,  114,   73,   -1,   -1,  109,  109,  109,  114,
           27,   -1,   -1,   -1,   -1,   27,   -1,   -1,  109,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   91
    );

    protected $gotoBase = array(
            0,    0, -212,    0,  171,    0,  330,   15,  131,  472,
          278,  255,  120,  142,    0,    0,   63,  136,   81,  116,
          137,   33,  -11,    0,  121, -195,    0,   83,    0,    0,
            0,    0,    0,  299,    0,    0,  -40,  362,    0,    0,
            0,  315,  113,  107,   86,  -22,    0,    0,    0,    0,
            0,   77,  -15,    0,   89,  -70,    0,   36,   39, -283,
            0,   67,   27, -197,    0,  111,    0,    0,  -97,    0,
          133,    0,  134,   72,    0,  232,  110,   43,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  165,    0,
           35,  148,  114,    0,    0,    0,    0,    0,   37,  240,
          280,    0,    0,   54,    0,   52,    0,  -45, -111,  208,
         -108,    0,    0,  117,  192,   78,  119,  -63,  161,    0,
            0,   40,  173,    0,    0,    0,    0,    0,  108,    0,
          251,   24,   28,    0
    );

    protected $gotoDefault = array(
        -32768,  480,    3,  672,  733,  741,  613,  497,  533,  782,
          783,  784,  382,  428,  498,  381,  417,  410,  772,  765,
          767,  775,  184,  418,  778,    8,  780, 1000,  369,  787,
          370,  605,  789,  548,  791,  792,  150,  499,  800,  383,
          384,  549,  392,  594,  807,  284,  389,  809,  371,  811,
          817,  372,  625,  609,  577,  622,  500,  460,  588,  293,
          558,  584,  848,  358,  856,  660,  864,  867,  501,  578,
          878,  466,  886, 1076,  400,  892,  898,  903,  906,  436,
          419,  601,  910,  911,   32,  915,  634,  635,  930,  318,
          938,  951,  434, 1019, 1021,  502,  503,  542,  474,  525,
          547,  504, 1042,  454,  421, 1045,  505,  506,  444,  445,
         1063, 1060,  364, 1146,  363,  462,  327, 1133,  597, 1095,
          470, 1184, 1142,  354,  507,  508,  377,  394, 1179,  449,
         1186,  355, 1194,  585
    );

    protected $ruleToNonTerminal = array(
            0,    1,    2,    2,    4,    4,    4,    4,    4,    4,
            4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
            4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
            4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
            4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
            4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
            4,    4,    4,    5,    5,    5,    5,    5,    5,    5,
            6,    6,    7,    7,    8,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,   13,   13,   14,   14,
           14,   14,   16,   16,   12,   12,   17,   17,   18,   18,
           19,   19,   20,   20,   15,   15,   21,   23,   23,   24,
           25,   25,   26,   26,   26,   26,    9,    9,    9,    9,
            9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
            9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
            9,    9,    9,    9,    9,    9,   48,   48,   50,   49,
           49,   42,   42,   52,   52,   53,   53,   10,   11,   11,
           11,   56,   56,   56,   57,   57,   60,   60,   58,   58,
           61,   61,   34,   34,   44,   44,   47,   47,   46,   46,
           62,   35,   35,   35,   35,   63,   63,   64,   64,   65,
           65,   32,   32,   28,   28,   66,   30,   30,   67,   29,
           29,   31,   31,   43,   43,   43,   54,   54,   69,   69,
           70,   70,   72,   72,   72,   71,   71,   55,   55,   73,
           73,   73,   74,   74,   75,   75,   75,   39,   39,   76,
           76,   76,   40,   40,   77,   77,   59,   59,   78,   78,
           78,   78,   83,   83,   84,   84,   85,   85,   85,   85,
           85,   86,   87,   87,   82,   82,   79,   79,   81,   81,
           89,   89,   88,   88,   88,   88,   88,   88,   80,   80,
           90,   90,   41,   41,   33,   33,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           27,   27,   37,   37,   95,   95,   96,   96,   96,   96,
          102,   91,   91,   98,   98,  104,  104,  105,  106,  106,
          106,  106,  106,  106,  110,  110,   51,   51,   51,   92,
           92,  111,  111,  107,  107,  112,  112,  112,  112,   93,
           93,   93,   97,   97,   97,  103,  103,  117,  117,  117,
          117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
           22,   22,   22,   22,   22,   22,  119,  119,  119,  119,
          119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
          119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
          119,  119,  119,  119,  119,  119,  119,  119,  119,  101,
          101,   38,   38,   94,   94,   94,   94,  118,  118,  121,
          121,  120,  120,  122,  122,   45,   45,   45,   45,  124,
          124,  123,  123,  123,  123,  123,  125,  125,  109,  109,
          113,  113,  108,  108,  126,  126,  126,  126,  114,  114,
          114,  114,  100,  100,  115,  115,  115,   68,  127,  127,
          128,  128,  128,   99,   99,  129,  129,  130,  130,  130,
          130,  131,  116,  116,  116,  116,  132,  132,  132,  132,
          132,  132,  132,  133,  133,  133
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    3,    1,    1,    1,    1,    1,    3,
            5,    4,    3,    4,    2,    3,    1,    1,    7,    8,
            6,    7,    3,    1,    3,    1,    3,    1,    1,    3,
            1,    2,    1,    2,    3,    1,    3,    3,    1,    3,
            2,    0,    1,    1,    1,    1,    3,    5,    8,    3,
            5,    9,    3,    2,    3,    2,    3,    2,    3,    2,
            1,    3,    3,    3,    1,    2,    5,    7,    9,    5,
            1,    6,    3,    3,    2,    1,    0,    2,    8,    0,
            4,    1,    3,    0,    1,    0,    1,   10,    7,    6,
            5,    1,    2,    2,    0,    2,    0,    2,    0,    2,
            1,    3,    1,    4,    1,    4,    1,    4,    1,    3,
            3,    3,    4,    4,    5,    0,    2,    4,    3,    1,
            1,    1,    4,    0,    2,    3,    0,    2,    4,    0,
            2,    0,    3,    1,    2,    1,    1,    0,    1,    3,
            4,    6,    1,    1,    1,    0,    1,    0,    2,    2,
            3,    3,    1,    3,    1,    2,    2,    3,    1,    1,
            2,    4,    3,    1,    1,    3,    2,    0,    3,    3,
            9,    3,    1,    3,    0,    2,    4,    5,    4,    4,
            4,    3,    1,    1,    1,    3,    1,    1,    0,    1,
            1,    2,    1,    1,    1,    1,    1,    1,    1,    3,
            1,    3,    3,    1,    0,    1,    1,    3,    3,    4,
            4,    1,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    2,    2,    2,    2,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    2,    2,    2,    2,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            1,    3,    5,    4,    3,    4,    4,    2,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
            2,    1,    1,    1,    3,    2,    1,    2,   10,   11,
            3,    3,    2,    4,    4,    3,    4,    4,    4,    4,
            7,    3,    2,    0,    4,    1,    3,    2,    2,    4,
            6,    2,    2,    4,    1,    1,    1,    2,    3,    1,
            1,    1,    1,    1,    1,    3,    3,    4,    4,    0,
            2,    1,    0,    1,    1,    0,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    3,    2,
            1,    3,    1,    4,    3,    1,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    2,    2,    2,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    5,    4,    4,    3,    1,
            3,    1,    1,    1,    1,    3,    3,    0,    2,    0,
            1,    3,    1,    3,    1,    1,    1,    1,    1,    6,
            4,    3,    4,    2,    4,    4,    1,    3,    1,    2,
            1,    1,    4,    1,    3,    6,    4,    4,    4,    4,
            1,    4,    0,    1,    1,    3,    1,    4,    3,    1,
            1,    1,    0,    0,    2,    3,    1,    3,    1,    4,
            2,    1,    2,    2,    1,    2,    1,    4,    3,    3,
            3,    6,    3,    1,    1,    1
    );

    protected $productions = array(
        "start : start",
        "start : top_statement_list",
        "top_statement_list : top_statement_list top_statement",
        "top_statement_list : /* empty */",
        "reserved_non_modifiers : T_INCLUDE",
        "reserved_non_modifiers : T_INCLUDE_ONCE",
        "reserved_non_modifiers : T_EVAL",
        "reserved_non_modifiers : T_REQUIRE",
        "reserved_non_modifiers : T_REQUIRE_ONCE",
        "reserved_non_modifiers : T_LOGICAL_OR",
        "reserved_non_modifiers : T_LOGICAL_XOR",
        "reserved_non_modifiers : T_LOGICAL_AND",
        "reserved_non_modifiers : T_INSTANCEOF",
        "reserved_non_modifiers : T_NEW",
        "reserved_non_modifiers : T_CLONE",
        "reserved_non_modifiers : T_EXIT",
        "reserved_non_modifiers : T_IF",
        "reserved_non_modifiers : T_ELSEIF",
        "reserved_non_modifiers : T_ELSE",
        "reserved_non_modifiers : T_ENDIF",
        "reserved_non_modifiers : T_ECHO",
        "reserved_non_modifiers : T_DO",
        "reserved_non_modifiers : T_WHILE",
        "reserved_non_modifiers : T_ENDWHILE",
        "reserved_non_modifiers : T_FOR",
        "reserved_non_modifiers : T_ENDFOR",
        "reserved_non_modifiers : T_FOREACH",
        "reserved_non_modifiers : T_ENDFOREACH",
        "reserved_non_modifiers : T_DECLARE",
        "reserved_non_modifiers : T_ENDDECLARE",
        "reserved_non_modifiers : T_AS",
        "reserved_non_modifiers : T_TRY",
        "reserved_non_modifiers : T_CATCH",
        "reserved_non_modifiers : T_FINALLY",
        "reserved_non_modifiers : T_THROW",
        "reserved_non_modifiers : T_USE",
        "reserved_non_modifiers : T_INSTEADOF",
        "reserved_non_modifiers : T_GLOBAL",
        "reserved_non_modifiers : T_VAR",
        "reserved_non_modifiers : T_UNSET",
        "reserved_non_modifiers : T_ISSET",
        "reserved_non_modifiers : T_EMPTY",
        "reserved_non_modifiers : T_CONTINUE",
        "reserved_non_modifiers : T_GOTO",
        "reserved_non_modifiers : T_FUNCTION",
        "reserved_non_modifiers : T_CONST",
        "reserved_non_modifiers : T_RETURN",
        "reserved_non_modifiers : T_PRINT",
        "reserved_non_modifiers : T_YIELD",
        "reserved_non_modifiers : T_LIST",
        "reserved_non_modifiers : T_SWITCH",
        "reserved_non_modifiers : T_ENDSWITCH",
        "reserved_non_modifiers : T_CASE",
        "reserved_non_modifiers : T_DEFAULT",
        "reserved_non_modifiers : T_BREAK",
        "reserved_non_modifiers : T_ARRAY",
        "reserved_non_modifiers : T_CALLABLE",
        "reserved_non_modifiers : T_EXTENDS",
        "reserved_non_modifiers : T_IMPLEMENTS",
        "reserved_non_modifiers : T_NAMESPACE",
        "reserved_non_modifiers : T_TRAIT",
        "reserved_non_modifiers : T_INTERFACE",
        "reserved_non_modifiers : T_CLASS",
        "semi_reserved : reserved_non_modifiers",
        "semi_reserved : T_STATIC",
        "semi_reserved : T_ABSTRACT",
        "semi_reserved : T_FINAL",
        "semi_reserved : T_PRIVATE",
        "semi_reserved : T_PROTECTED",
        "semi_reserved : T_PUBLIC",
        "identifier : T_STRING",
        "identifier : semi_reserved",
        "namespace_name_parts : T_STRING",
        "namespace_name_parts : namespace_name_parts T_NS_SEPARATOR T_STRING",
        "namespace_name : namespace_name_parts",
        "top_statement : statement",
        "top_statement : function_declaration_statement",
        "top_statement : class_declaration_statement",
        "top_statement : T_HALT_COMPILER",
        "top_statement : T_NAMESPACE namespace_name ';'",
        "top_statement : T_NAMESPACE namespace_name '{' top_statement_list '}'",
        "top_statement : T_NAMESPACE '{' top_statement_list '}'",
        "top_statement : T_USE use_declarations ';'",
        "top_statement : T_USE use_type use_declarations ';'",
        "top_statement : group_use_declaration ';'",
        "top_statement : T_CONST constant_declaration_list ';'",
        "use_type : T_FUNCTION",
        "use_type : T_CONST",
        "group_use_declaration : T_USE use_type namespace_name_parts T_NS_SEPARATOR '{' unprefixed_use_declarations '}'",
        "group_use_declaration : T_USE use_type T_NS_SEPARATOR namespace_name_parts T_NS_SEPARATOR '{' unprefixed_use_declarations '}'",
        "group_use_declaration : T_USE namespace_name_parts T_NS_SEPARATOR '{' inline_use_declarations '}'",
        "group_use_declaration : T_USE T_NS_SEPARATOR namespace_name_parts T_NS_SEPARATOR '{' inline_use_declarations '}'",
        "unprefixed_use_declarations : unprefixed_use_declarations ',' unprefixed_use_declaration",
        "unprefixed_use_declarations : unprefixed_use_declaration",
        "use_declarations : use_declarations ',' use_declaration",
        "use_declarations : use_declaration",
        "inline_use_declarations : inline_use_declarations ',' inline_use_declaration",
        "inline_use_declarations : inline_use_declaration",
        "unprefixed_use_declaration : namespace_name",
        "unprefixed_use_declaration : namespace_name T_AS T_STRING",
        "use_declaration : unprefixed_use_declaration",
        "use_declaration : T_NS_SEPARATOR unprefixed_use_declaration",
        "inline_use_declaration : unprefixed_use_declaration",
        "inline_use_declaration : use_type unprefixed_use_declaration",
        "constant_declaration_list : constant_declaration_list ',' constant_declaration",
        "constant_declaration_list : constant_declaration",
        "constant_declaration : T_STRING '=' static_scalar",
        "class_const_list : class_const_list ',' class_const",
        "class_const_list : class_const",
        "class_const : identifier '=' static_scalar",
        "inner_statement_list : inner_statement_list inner_statement",
        "inner_statement_list : /* empty */",
        "inner_statement : statement",
        "inner_statement : function_declaration_statement",
        "inner_statement : class_declaration_statement",
        "inner_statement : T_HALT_COMPILER",
        "statement : '{' inner_statement_list '}'",
        "statement : T_IF parentheses_expr statement elseif_list else_single",
        "statement : T_IF parentheses_expr ':' inner_statement_list new_elseif_list new_else_single T_ENDIF ';'",
        "statement : T_WHILE parentheses_expr while_statement",
        "statement : T_DO statement T_WHILE parentheses_expr ';'",
        "statement : T_FOR '(' for_expr ';' for_expr ';' for_expr ')' for_statement",
        "statement : T_SWITCH parentheses_expr switch_case_list",
        "statement : T_BREAK ';'",
        "statement : T_BREAK expr ';'",
        "statement : T_CONTINUE ';'",
        "statement : T_CONTINUE expr ';'",
        "statement : T_RETURN ';'",
        "statement : T_RETURN expr ';'",
        "statement : yield_expr ';'",
        "statement : comment",
        "statement : T_GLOBAL global_var_list ';'",
        "statement : T_STATIC static_var_list ';'",
        "statement : T_ECHO expr_list ';'",
        "statement : T_INLINE_HTML",
        "statement : expr ';'",
        "statement : T_UNSET '(' variables_list ')' ';'",
        "statement : T_FOREACH '(' expr T_AS foreach_variable ')' foreach_statement",
        "statement : T_FOREACH '(' expr T_AS variable T_DOUBLE_ARROW foreach_variable ')' foreach_statement",
        "statement : T_DECLARE '(' declare_list ')' declare_statement",
        "statement : ';'",
        "statement : T_TRY '{' inner_statement_list '}' catches optional_finally",
        "statement : T_THROW expr ';'",
        "statement : T_GOTO T_STRING ';'",
        "statement : T_STRING ':'",
        "statement : error",
        "catches : /* empty */",
        "catches : catches catch",
        "catch : T_CATCH '(' name T_VARIABLE ')' '{' inner_statement_list '}'",
        "optional_finally : /* empty */",
        "optional_finally : T_FINALLY '{' inner_statement_list '}'",
        "variables_list : variable",
        "variables_list : variables_list ',' variable",
        "optional_ref : /* empty */",
        "optional_ref : '&'",
        "optional_ellipsis : /* empty */",
        "optional_ellipsis : T_ELLIPSIS",
        "function_declaration_statement : T_FUNCTION optional_ref T_STRING '(' parameter_list ')' optional_return_type '{' inner_statement_list '}'",
        "class_declaration_statement : class_entry_type T_STRING extends_from implements_list '{' class_statement_list '}'",
        "class_declaration_statement : T_INTERFACE T_STRING interface_extends_list '{' class_statement_list '}'",
        "class_declaration_statement : T_TRAIT T_STRING '{' class_statement_list '}'",
        "class_entry_type : T_CLASS",
        "class_entry_type : T_ABSTRACT T_CLASS",
        "class_entry_type : T_FINAL T_CLASS",
        "extends_from : /* empty */",
        "extends_from : T_EXTENDS name",
        "interface_extends_list : /* empty */",
        "interface_extends_list : T_EXTENDS name_list",
        "implements_list : /* empty */",
        "implements_list : T_IMPLEMENTS name_list",
        "name_list : name",
        "name_list : name_list ',' name",
        "for_statement : statement",
        "for_statement : ':' inner_statement_list T_ENDFOR ';'",
        "foreach_statement : statement",
        "foreach_statement : ':' inner_statement_list T_ENDFOREACH ';'",
        "declare_statement : statement",
        "declare_statement : ':' inner_statement_list T_ENDDECLARE ';'",
        "declare_list : declare_list_element",
        "declare_list : declare_list ',' declare_list_element",
        "declare_list_element : T_STRING '=' static_scalar",
        "switch_case_list : '{' case_list '}'",
        "switch_case_list : '{' ';' case_list '}'",
        "switch_case_list : ':' case_list T_ENDSWITCH ';'",
        "switch_case_list : ':' ';' case_list T_ENDSWITCH ';'",
        "case_list : /* empty */",
        "case_list : case_list case",
        "case : T_CASE expr case_separator inner_statement_list",
        "case : T_DEFAULT case_separator inner_statement_list",
        "case_separator : ':'",
        "case_separator : ';'",
        "while_statement : statement",
        "while_statement : ':' inner_statement_list T_ENDWHILE ';'",
        "elseif_list : /* empty */",
        "elseif_list : elseif_list elseif",
        "elseif : T_ELSEIF parentheses_expr statement",
        "new_elseif_list : /* empty */",
        "new_elseif_list : new_elseif_list new_elseif",
        "new_elseif : T_ELSEIF parentheses_expr ':' inner_statement_list",
        "else_single : /* empty */",
        "else_single : T_ELSE statement",
        "new_else_single : /* empty */",
        "new_else_single : T_ELSE ':' inner_statement_list",
        "foreach_variable : variable",
        "foreach_variable : '&' variable",
        "foreach_variable : list_expr",
        "parameter_list : non_empty_parameter_list",
        "parameter_list : /* empty */",
        "non_empty_parameter_list : parameter",
        "non_empty_parameter_list : non_empty_parameter_list ',' parameter",
        "parameter : optional_param_type optional_ref optional_ellipsis T_VARIABLE",
        "parameter : optional_param_type optional_ref optional_ellipsis T_VARIABLE '=' static_scalar",
        "type : name",
        "type : T_ARRAY",
        "type : T_CALLABLE",
        "optional_param_type : /* empty */",
        "optional_param_type : type",
        "optional_return_type : /* empty */",
        "optional_return_type : ':' type",
        "argument_list : '(' ')'",
        "argument_list : '(' non_empty_argument_list ')'",
        "argument_list : '(' yield_expr ')'",
        "non_empty_argument_list : argument",
        "non_empty_argument_list : non_empty_argument_list ',' argument",
        "argument : expr",
        "argument : '&' variable",
        "argument : T_ELLIPSIS expr",
        "global_var_list : global_var_list ',' global_var",
        "global_var_list : global_var",
        "global_var : T_VARIABLE",
        "global_var : '$' variable",
        "global_var : '$' '{' expr '}'",
        "static_var_list : static_var_list ',' static_var",
        "static_var_list : static_var",
        "static_var : T_VARIABLE",
        "static_var : T_VARIABLE '=' static_scalar",
        "class_statement_list : class_statement_list class_statement",
        "class_statement_list : /* empty */",
        "class_statement : variable_modifiers property_declaration_list ';'",
        "class_statement : T_CONST class_const_list ';'",
        "class_statement : method_modifiers T_FUNCTION optional_ref identifier '(' parameter_list ')' optional_return_type method_body",
        "class_statement : T_USE name_list trait_adaptations",
        "trait_adaptations : ';'",
        "trait_adaptations : '{' trait_adaptation_list '}'",
        "trait_adaptation_list : /* empty */",
        "trait_adaptation_list : trait_adaptation_list trait_adaptation",
        "trait_adaptation : trait_method_reference_fully_qualified T_INSTEADOF name_list ';'",
        "trait_adaptation : trait_method_reference T_AS member_modifier identifier ';'",
        "trait_adaptation : trait_method_reference T_AS member_modifier ';'",
        "trait_adaptation : trait_method_reference T_AS T_STRING ';'",
        "trait_adaptation : trait_method_reference T_AS reserved_non_modifiers ';'",
        "trait_method_reference_fully_qualified : name T_PAAMAYIM_NEKUDOTAYIM identifier",
        "trait_method_reference : trait_method_reference_fully_qualified",
        "trait_method_reference : identifier",
        "method_body : ';'",
        "method_body : '{' inner_statement_list '}'",
        "variable_modifiers : non_empty_member_modifiers",
        "variable_modifiers : T_VAR",
        "method_modifiers : /* empty */",
        "method_modifiers : non_empty_member_modifiers",
        "non_empty_member_modifiers : member_modifier",
        "non_empty_member_modifiers : non_empty_member_modifiers member_modifier",
        "member_modifier : T_PUBLIC",
        "member_modifier : T_PROTECTED",
        "member_modifier : T_PRIVATE",
        "member_modifier : T_STATIC",
        "member_modifier : T_ABSTRACT",
        "member_modifier : T_FINAL",
        "property_declaration_list : property_declaration",
        "property_declaration_list : property_declaration_list ',' property_declaration",
        "property_declaration : T_VARIABLE",
        "property_declaration : T_VARIABLE '=' static_scalar",
        "expr_list : expr_list ',' expr",
        "expr_list : expr",
        "for_expr : /* empty */",
        "for_expr : expr_list",
        "expr : variable",
        "expr : list_expr '=' expr",
        "expr : variable '=' expr",
        "expr : variable '=' '&' variable",
        "expr : variable '=' '&' new_expr",
        "expr : new_expr",
        "expr : T_CLONE expr",
        "expr : variable T_PLUS_EQUAL expr",
        "expr : variable T_MINUS_EQUAL expr",
        "expr : variable T_MUL_EQUAL expr",
        "expr : variable T_DIV_EQUAL expr",
        "expr : variable T_CONCAT_EQUAL expr",
        "expr : variable T_MOD_EQUAL expr",
        "expr : variable T_AND_EQUAL expr",
        "expr : variable T_OR_EQUAL expr",
        "expr : variable T_XOR_EQUAL expr",
        "expr : variable T_SL_EQUAL expr",
        "expr : variable T_SR_EQUAL expr",
        "expr : variable T_POW_EQUAL expr",
        "expr : variable T_INC",
        "expr : T_INC variable",
        "expr : variable T_DEC",
        "expr : T_DEC variable",
        "expr : expr T_BOOLEAN_OR expr",
        "expr : expr T_BOOLEAN_AND expr",
        "expr : expr T_LOGICAL_OR expr",
        "expr : expr T_LOGICAL_AND expr",
        "expr : expr T_LOGICAL_XOR expr",
        "expr : expr '|' expr",
        "expr : expr '&' expr",
        "expr : expr '^' expr",
        "expr : expr '.' expr",
        "expr : expr '+' expr",
        "expr : expr '-' expr",
        "expr : expr '*' expr",
        "expr : expr '/' expr",
        "expr : expr '%' expr",
        "expr : expr T_SL expr",
        "expr : expr T_SR expr",
        "expr : expr T_POW expr",
        "expr : '+' expr",
        "expr : '-' expr",
        "expr : '!' expr",
        "expr : '~' expr",
        "expr : expr T_IS_IDENTICAL expr",
        "expr : expr T_IS_NOT_IDENTICAL expr",
        "expr : expr T_IS_EQUAL expr",
        "expr : expr T_IS_NOT_EQUAL expr",
        "expr : expr T_SPACESHIP expr",
        "expr : expr '<' expr",
        "expr : expr T_IS_SMALLER_OR_EQUAL expr",
        "expr : expr '>' expr",
        "expr : expr T_IS_GREATER_OR_EQUAL expr",
        "expr : expr T_INSTANCEOF class_name_reference",
        "expr : parentheses_expr",
        "expr : '(' new_expr ')'",
        "expr : expr '?' expr ':' expr",
        "expr : expr '?' ':' expr",
        "expr : expr T_COALESCE expr",
        "expr : T_ISSET '(' variables_list ')'",
        "expr : T_EMPTY '(' expr ')'",
        "expr : T_INCLUDE expr",
        "expr : T_INCLUDE_ONCE expr",
        "expr : T_EVAL parentheses_expr",
        "expr : T_REQUIRE expr",
        "expr : T_REQUIRE_ONCE expr",
        "expr : T_INT_CAST expr",
        "expr : T_DOUBLE_CAST expr",
        "expr : T_STRING_CAST expr",
        "expr : T_ARRAY_CAST expr",
        "expr : T_OBJECT_CAST expr",
        "expr : T_BOOL_CAST expr",
        "expr : T_UNSET_CAST expr",
        "expr : T_EXIT exit_expr",
        "expr : '@' expr",
        "expr : scalar",
        "expr : array_expr",
        "expr : scalar_dereference",
        "expr : '`' backticks_expr '`'",
        "expr : T_PRINT expr",
        "expr : T_YIELD",
        "expr : T_YIELD_FROM expr",
        "expr : T_FUNCTION optional_ref '(' parameter_list ')' lexical_vars optional_return_type '{' inner_statement_list '}'",
        "expr : T_STATIC T_FUNCTION optional_ref '(' parameter_list ')' lexical_vars optional_return_type '{' inner_statement_list '}'",
        "parentheses_expr : '(' expr ')'",
        "parentheses_expr : '(' yield_expr ')'",
        "yield_expr : T_YIELD expr",
        "yield_expr : T_YIELD expr T_DOUBLE_ARROW expr",
        "array_expr : T_ARRAY '(' array_pair_list ')'",
        "array_expr : '[' array_pair_list ']'",
        "scalar_dereference : array_expr '[' dim_offset ']'",
        "scalar_dereference : T_CONSTANT_ENCAPSED_STRING '[' dim_offset ']'",
        "scalar_dereference : constant '[' dim_offset ']'",
        "scalar_dereference : scalar_dereference '[' dim_offset ']'",
        "anonymous_class : T_CLASS ctor_arguments extends_from implements_list '{' class_statement_list '}'",
        "new_expr : T_NEW class_name_reference ctor_arguments",
        "new_expr : T_NEW anonymous_class",
        "lexical_vars : /* empty */",
        "lexical_vars : T_USE '(' lexical_var_list ')'",
        "lexical_var_list : lexical_var",
        "lexical_var_list : lexical_var_list ',' lexical_var",
        "lexical_var : optional_ref T_VARIABLE",
        "function_call : name argument_list",
        "function_call : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM identifier argument_list",
        "function_call : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM '{' expr '}' argument_list",
        "function_call : static_property argument_list",
        "function_call : variable_without_objects argument_list",
        "function_call : function_call '[' dim_offset ']'",
        "class_name : T_STATIC",
        "class_name : name",
        "name : namespace_name_parts",
        "name : T_NS_SEPARATOR namespace_name_parts",
        "name : T_NAMESPACE T_NS_SEPARATOR namespace_name_parts",
        "class_name_reference : class_name",
        "class_name_reference : dynamic_class_name_reference",
        "dynamic_class_name_reference : object_access_for_dcnr",
        "dynamic_class_name_reference : base_variable",
        "class_name_or_var : class_name",
        "class_name_or_var : reference_variable",
        "object_access_for_dcnr : base_variable T_OBJECT_OPERATOR object_property",
        "object_access_for_dcnr : object_access_for_dcnr T_OBJECT_OPERATOR object_property",
        "object_access_for_dcnr : object_access_for_dcnr '[' dim_offset ']'",
        "object_access_for_dcnr : object_access_for_dcnr '{' expr '}'",
        "exit_expr : /* empty */",
        "exit_expr : '(' ')'",
        "exit_expr : parentheses_expr",
        "backticks_expr : /* empty */",
        "backticks_expr : T_ENCAPSED_AND_WHITESPACE",
        "backticks_expr : encaps_list",
        "ctor_arguments : /* empty */",
        "ctor_arguments : argument_list",
        "common_scalar : T_LNUMBER",
        "common_scalar : T_DNUMBER",
        "common_scalar : T_CONSTANT_ENCAPSED_STRING",
        "common_scalar : T_LINE",
        "common_scalar : T_FILE",
        "common_scalar : T_DIR",
        "common_scalar : T_CLASS_C",
        "common_scalar : T_TRAIT_C",
        "common_scalar : T_METHOD_C",
        "common_scalar : T_FUNC_C",
        "common_scalar : T_NS_C",
        "common_scalar : T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC",
        "common_scalar : T_START_HEREDOC T_END_HEREDOC",
        "static_scalar : common_scalar",
        "static_scalar : class_name T_PAAMAYIM_NEKUDOTAYIM identifier",
        "static_scalar : name",
        "static_scalar : T_ARRAY '(' static_array_pair_list ')'",
        "static_scalar : '[' static_array_pair_list ']'",
        "static_scalar : static_operation",
        "static_operation : static_scalar T_BOOLEAN_OR static_scalar",
        "static_operation : static_scalar T_BOOLEAN_AND static_scalar",
        "static_operation : static_scalar T_LOGICAL_OR static_scalar",
        "static_operation : static_scalar T_LOGICAL_AND static_scalar",
        "static_operation : static_scalar T_LOGICAL_XOR static_scalar",
        "static_operation : static_scalar '|' static_scalar",
        "static_operation : static_scalar '&' static_scalar",
        "static_operation : static_scalar '^' static_scalar",
        "static_operation : static_scalar '.' static_scalar",
        "static_operation : static_scalar '+' static_scalar",
        "static_operation : static_scalar '-' static_scalar",
        "static_operation : static_scalar '*' static_scalar",
        "static_operation : static_scalar '/' static_scalar",
        "static_operation : static_scalar '%' static_scalar",
        "static_operation : static_scalar T_SL static_scalar",
        "static_operation : static_scalar T_SR static_scalar",
        "static_operation : static_scalar T_POW static_scalar",
        "static_operation : '+' static_scalar",
        "static_operation : '-' static_scalar",
        "static_operation : '!' static_scalar",
        "static_operation : '~' static_scalar",
        "static_operation : static_scalar T_IS_IDENTICAL static_scalar",
        "static_operation : static_scalar T_IS_NOT_IDENTICAL static_scalar",
        "static_operation : static_scalar T_IS_EQUAL static_scalar",
        "static_operation : static_scalar T_IS_NOT_EQUAL static_scalar",
        "static_operation : static_scalar '<' static_scalar",
        "static_operation : static_scalar T_IS_SMALLER_OR_EQUAL static_scalar",
        "static_operation : static_scalar '>' static_scalar",
        "static_operation : static_scalar T_IS_GREATER_OR_EQUAL static_scalar",
        "static_operation : static_scalar '?' static_scalar ':' static_scalar",
        "static_operation : static_scalar '?' ':' static_scalar",
        "static_operation : static_scalar '[' static_scalar ']'",
        "static_operation : '(' static_scalar ')'",
        "constant : name",
        "constant : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM identifier",
        "comment : T_COMMENT",
        "comment : T_DOC_COMMENT",
        "scalar : common_scalar",
        "scalar : constant",
        "scalar : '\"' encaps_list '\"'",
        "scalar : T_START_HEREDOC encaps_list T_END_HEREDOC",
        "static_array_pair_list : /* empty */",
        "static_array_pair_list : non_empty_static_array_pair_list optional_comma",
        "optional_comma : /* empty */",
        "optional_comma : ','",
        "non_empty_static_array_pair_list : non_empty_static_array_pair_list ',' static_array_pair",
        "non_empty_static_array_pair_list : static_array_pair",
        "static_array_pair : static_scalar T_DOUBLE_ARROW static_scalar",
        "static_array_pair : static_scalar",
        "variable : object_access",
        "variable : base_variable",
        "variable : function_call",
        "variable : new_expr_array_deref",
        "new_expr_array_deref : '(' new_expr ')' '[' dim_offset ']'",
        "new_expr_array_deref : new_expr_array_deref '[' dim_offset ']'",
        "object_access : variable_or_new_expr T_OBJECT_OPERATOR object_property",
        "object_access : variable_or_new_expr T_OBJECT_OPERATOR object_property argument_list",
        "object_access : object_access argument_list",
        "object_access : object_access '[' dim_offset ']'",
        "object_access : object_access '{' expr '}'",
        "variable_or_new_expr : variable",
        "variable_or_new_expr : '(' new_expr ')'",
        "variable_without_objects : reference_variable",
        "variable_without_objects : '$' variable_without_objects",
        "base_variable : variable_without_objects",
        "base_variable : static_property",
        "static_property : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM '$' reference_variable",
        "static_property : static_property_with_arrays",
        "static_property_with_arrays : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE",
        "static_property_with_arrays : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM '$' '{' expr '}'",
        "static_property_with_arrays : static_property_with_arrays '[' dim_offset ']'",
        "static_property_with_arrays : static_property_with_arrays '{' expr '}'",
        "reference_variable : reference_variable '[' dim_offset ']'",
        "reference_variable : reference_variable '{' expr '}'",
        "reference_variable : T_VARIABLE",
        "reference_variable : '$' '{' expr '}'",
        "dim_offset : /* empty */",
        "dim_offset : expr",
        "object_property : T_STRING",
        "object_property : '{' expr '}'",
        "object_property : variable_without_objects",
        "list_expr : T_LIST '(' list_expr_elements ')'",
        "list_expr_elements : list_expr_elements ',' list_expr_element",
        "list_expr_elements : list_expr_element",
        "list_expr_element : variable",
        "list_expr_element : list_expr",
        "list_expr_element : /* empty */",
        "array_pair_list : /* empty */",
        "array_pair_list : non_empty_array_pair_list optional_comma",
        "non_empty_array_pair_list : non_empty_array_pair_list ',' array_pair",
        "non_empty_array_pair_list : array_pair",
        "array_pair : expr T_DOUBLE_ARROW expr",
        "array_pair : expr",
        "array_pair : expr T_DOUBLE_ARROW '&' variable",
        "array_pair : '&' variable",
        "encaps_str : T_ENCAPSED_AND_WHITESPACE",
        "encaps_list : encaps_list encaps_var",
        "encaps_list : encaps_list encaps_str",
        "encaps_list : encaps_var",
        "encaps_list : encaps_str encaps_var",
        "encaps_var : T_VARIABLE",
        "encaps_var : T_VARIABLE '[' encaps_var_offset ']'",
        "encaps_var : T_VARIABLE T_OBJECT_OPERATOR T_STRING",
        "encaps_var : T_DOLLAR_OPEN_CURLY_BRACES expr '}'",
        "encaps_var : T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '}'",
        "encaps_var : T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}'",
        "encaps_var : T_CURLY_OPEN variable '}'",
        "encaps_var_offset : T_STRING",
        "encaps_var_offset : T_NUM_STRING",
        "encaps_var_offset : T_VARIABLE"
    );

    protected function reduceRule0() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule1() {
         $this->semValue = $this->handleNamespaces($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule2() {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; };
    }

    protected function reduceRule3() {
         $this->semValue = array();
    }

    protected function reduceRule4() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule5() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule6() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule7() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule8() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule9() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule10() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule11() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule12() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule13() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule14() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule15() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule16() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule17() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule18() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule19() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule20() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule21() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule22() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule23() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule24() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule25() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule26() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule27() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule28() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule29() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule30() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule31() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule32() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule33() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule34() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule35() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule36() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule37() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule38() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule39() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule40() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule41() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule42() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule43() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule44() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule45() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule46() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule47() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule48() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule49() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule50() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule51() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule52() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule53() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule54() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule55() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule56() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule57() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule58() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule59() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule60() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule61() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule62() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule63() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule64() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule65() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule66() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule67() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule68() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule69() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule70() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule71() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule72() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule73() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule74() {
         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule75() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule76() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule77() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule78() {
         $this->semValue = new Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule79() {
         $this->semValue = new Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule80() {
         $this->semValue = new Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule81() {
         $this->semValue = new Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule82() {
         $this->semValue = new Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Stmt\Use_::TYPE_NORMAL, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule83() {
         $this->semValue = new Stmt\Use_($this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-2)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule84() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule85() {
         $this->semValue = new Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule86() {
         $this->semValue = Stmt\Use_::TYPE_FUNCTION;
    }

    protected function reduceRule87() {
         $this->semValue = Stmt\Use_::TYPE_CONSTANT;
    }

    protected function reduceRule88() {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(7-3)], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(7-6)], $this->semStack[$this->stackPos-(7-2)], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule89() {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(8-4)], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(8-7)], $this->semStack[$this->stackPos-(8-2)], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes);
    }

    protected function reduceRule90() {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(6-2)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(6-5)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule91() {
         $this->semValue = new Stmt\GroupUse(new Name($this->semStack[$this->stackPos-(7-3)], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(7-6)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule92() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule93() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule94() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule95() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule96() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule97() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule98() {
         $this->semValue = new Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule99() {
         $this->semValue = new Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], Stmt\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule100() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule101() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
    }

    protected function reduceRule102() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; $this->semValue->type = Stmt\Use_::TYPE_NORMAL;
    }

    protected function reduceRule103() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; $this->semValue->type = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule104() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule105() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule106() {
         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule107() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule108() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule109() {
         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule110() {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; };
    }

    protected function reduceRule111() {
         $this->semValue = array();
    }

    protected function reduceRule112() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule113() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule114() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule115() {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope', $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule116() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule117() {
         $this->semValue = new Stmt\If_($this->semStack[$this->stackPos-(5-2)], ['stmts' => is_array($this->semStack[$this->stackPos-(5-3)]) ? $this->semStack[$this->stackPos-(5-3)] : array($this->semStack[$this->stackPos-(5-3)]), 'elseifs' => $this->semStack[$this->stackPos-(5-4)], 'else' => $this->semStack[$this->stackPos-(5-5)]], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule118() {
         $this->semValue = new Stmt\If_($this->semStack[$this->stackPos-(8-2)], ['stmts' => $this->semStack[$this->stackPos-(8-4)], 'elseifs' => $this->semStack[$this->stackPos-(8-5)], 'else' => $this->semStack[$this->stackPos-(8-6)]], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes);
    }

    protected function reduceRule119() {
         $this->semValue = new Stmt\While_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule120() {
         $this->semValue = new Stmt\Do_($this->semStack[$this->stackPos-(5-4)], is_array($this->semStack[$this->stackPos-(5-2)]) ? $this->semStack[$this->stackPos-(5-2)] : array($this->semStack[$this->stackPos-(5-2)]), $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule121() {
         $this->semValue = new Stmt\For_(['init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
    }

    protected function reduceRule122() {
         $this->semValue = new Stmt\Switch_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule123() {
         $this->semValue = new Stmt\Break_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule124() {
         $this->semValue = new Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule125() {
         $this->semValue = new Stmt\Continue_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule126() {
         $this->semValue = new Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule127() {
         $this->semValue = new Stmt\Return_(null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule128() {
         $this->semValue = new Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule129() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule130() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule131() {
         $this->semValue = new Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule132() {
         $this->semValue = new Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule133() {
         $this->semValue = new Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule134() {
         $this->semValue = new Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule135() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule136() {
         $this->semValue = new Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule137() {
         $this->semValue = new Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], ['keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule138() {
         $this->semValue = new Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], ['keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
    }

    protected function reduceRule139() {
         $this->semValue = new Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule140() {
         $this->semValue = array(); /* means: no statement */
    }

    protected function reduceRule141() {
         $this->semValue = new Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule142() {
         $this->semValue = new Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule143() {
         $this->semValue = new Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule144() {
         $this->semValue = new Stmt\Label($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule145() {
         $this->semValue = array(); /* means: no statement */
    }

    protected function reduceRule146() {
         $this->semValue = array();
    }

    protected function reduceRule147() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule148() {
         $this->semValue = new Stmt\Catch_($this->semStack[$this->stackPos-(8-3)], substr($this->semStack[$this->stackPos-(8-4)], 1), $this->semStack[$this->stackPos-(8-7)], $this->startAttributeStack[$this->stackPos-(8-1)] + $this->endAttributes);
    }

    protected function reduceRule149() {
         $this->semValue = null;
    }

    protected function reduceRule150() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)];
    }

    protected function reduceRule151() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule152() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule153() {
         $this->semValue = false;
    }

    protected function reduceRule154() {
         $this->semValue = true;
    }

    protected function reduceRule155() {
         $this->semValue = false;
    }

    protected function reduceRule156() {
         $this->semValue = true;
    }

    protected function reduceRule157() {
         $this->semValue = new Stmt\Function_($this->semStack[$this->stackPos-(10-3)], ['byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-5)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]], $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes);
    }

    protected function reduceRule158() {
         $this->semValue = new Stmt\Class_($this->semStack[$this->stackPos-(7-2)], ['type' => $this->semStack[$this->stackPos-(7-1)], 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes);
    }

    protected function reduceRule159() {
         $this->semValue = new Stmt\Interface_($this->semStack[$this->stackPos-(6-2)], ['extends' => $this->semStack[$this->stackPos-(6-3)], 'stmts' => $this->semStack[$this->stackPos-(6-5)]], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule160() {
         $this->semValue = new Stmt\Trait_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule161() {
         $this->semValue = 0;
    }

    protected function reduceRule162() {
         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
    }

    protected function reduceRule163() {
         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
    }

    protected function reduceRule164() {
         $this->semValue = null;
    }

    protected function reduceRule165() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
    }

    protected function reduceRule166() {
         $this->semValue = array();
    }

    protected function reduceRule167() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
    }

    protected function reduceRule168() {
         $this->semValue = array();
    }

    protected function reduceRule169() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
    }

    protected function reduceRule170() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule171() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule172() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule173() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
    }

    protected function reduceRule174() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule175() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
    }

    protected function reduceRule176() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule177() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
    }

    protected function reduceRule178() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule179() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule180() {
         $this->semValue = new Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule181() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule182() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)];
    }

    protected function reduceRule183() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
    }

    protected function reduceRule184() {
         $this->semValue = $this->semStack[$this->stackPos-(5-3)];
    }

    protected function reduceRule185() {
         $this->semValue = array();
    }

    protected function reduceRule186() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule187() {
         $this->semValue = new Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule188() {
         $this->semValue = new Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule189() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule190() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule191() {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule192() {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)];
    }

    protected function reduceRule193() {
         $this->semValue = array();
    }

    protected function reduceRule194() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule195() {
         $this->semValue = new Stmt\ElseIf_($this->semStack[$this->stackPos-(3-2)], is_array($this->semStack[$this->stackPos-(3-3)]) ? $this->semStack[$this->stackPos-(3-3)] : array($this->semStack[$this->stackPos-(3-3)]), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule196() {
         $this->semValue = array();
    }

    protected function reduceRule197() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule198() {
         $this->semValue = new Stmt\ElseIf_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule199() {
         $this->semValue = null;
    }

    protected function reduceRule200() {
         $this->semValue = new Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule201() {
         $this->semValue = null;
    }

    protected function reduceRule202() {
         $this->semValue = new Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule203() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false);
    }

    protected function reduceRule204() {
         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true);
    }

    protected function reduceRule205() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false);
    }

    protected function reduceRule206() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule207() {
         $this->semValue = array();
    }

    protected function reduceRule208() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule209() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule210() {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule211() {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule212() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule213() {
         $this->semValue = 'array';
    }

    protected function reduceRule214() {
         $this->semValue = 'callable';
    }

    protected function reduceRule215() {
         $this->semValue = null;
    }

    protected function reduceRule216() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule217() {
         $this->semValue = null;
    }

    protected function reduceRule218() {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)];
    }

    protected function reduceRule219() {
         $this->semValue = array();
    }

    protected function reduceRule220() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule221() {
         $this->semValue = array(new Node\Arg($this->semStack[$this->stackPos-(3-2)], false, false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes));
    }

    protected function reduceRule222() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule223() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule224() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule225() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule226() {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule227() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule228() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule229() {
         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule230() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule231() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule232() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule233() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule234() {
         $this->semValue = new Stmt\StaticVar(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule235() {
         $this->semValue = new Stmt\StaticVar(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule236() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule237() {
         $this->semValue = array();
    }

    protected function reduceRule238() {
         $this->semValue = new Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule239() {
         $this->semValue = new Stmt\ClassConst($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule240() {
         $this->semValue = new Stmt\ClassMethod($this->semStack[$this->stackPos-(9-4)], ['type' => $this->semStack[$this->stackPos-(9-1)], 'byRef' => $this->semStack[$this->stackPos-(9-3)], 'params' => $this->semStack[$this->stackPos-(9-6)], 'returnType' => $this->semStack[$this->stackPos-(9-8)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]], $this->startAttributeStack[$this->stackPos-(9-1)] + $this->endAttributes);
    }

    protected function reduceRule241() {
         $this->semValue = new Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule242() {
         $this->semValue = array();
    }

    protected function reduceRule243() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule244() {
         $this->semValue = array();
    }

    protected function reduceRule245() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule246() {
         $this->semValue = new Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule247() {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule248() {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule249() {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule250() {
         $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule251() {
         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]);
    }

    protected function reduceRule252() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule253() {
         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule254() {
         $this->semValue = null;
    }

    protected function reduceRule255() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule256() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule257() {
         $this->semValue = 0;
    }

    protected function reduceRule258() {
         $this->semValue = 0;
    }

    protected function reduceRule259() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule260() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule261() {
         Stmt\Class_::verifyModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)];
    }

    protected function reduceRule262() {
         $this->semValue = Stmt\Class_::MODIFIER_PUBLIC;
    }

    protected function reduceRule263() {
         $this->semValue = Stmt\Class_::MODIFIER_PROTECTED;
    }

    protected function reduceRule264() {
         $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
    }

    protected function reduceRule265() {
         $this->semValue = Stmt\Class_::MODIFIER_STATIC;
    }

    protected function reduceRule266() {
         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
    }

    protected function reduceRule267() {
         $this->semValue = Stmt\Class_::MODIFIER_FINAL;
    }

    protected function reduceRule268() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule269() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule270() {
         $this->semValue = new Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule271() {
         $this->semValue = new Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule272() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule273() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule274() {
         $this->semValue = array();
    }

    protected function reduceRule275() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule276() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule277() {
         $this->semValue = new Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule278() {
         $this->semValue = new Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule279() {
         $this->semValue = new Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule280() {
         $this->semValue = new Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule281() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule282() {
         $this->semValue = new Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule283() {
         $this->semValue = new Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule284() {
         $this->semValue = new Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule285() {
         $this->semValue = new Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule286() {
         $this->semValue = new Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule287() {
         $this->semValue = new Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule288() {
         $this->semValue = new Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule289() {
         $this->semValue = new Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule290() {
         $this->semValue = new Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule291() {
         $this->semValue = new Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule292() {
         $this->semValue = new Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule293() {
         $this->semValue = new Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule294() {
         $this->semValue = new Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule295() {
         $this->semValue = new Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule296() {
         $this->semValue = new Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule297() {
         $this->semValue = new Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule298() {
         $this->semValue = new Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule299() {
         $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule300() {
         $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule301() {
         $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule302() {
         $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule303() {
         $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule304() {
         $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule305() {
         $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule306() {
         $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule307() {
         $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule308() {
         $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule309() {
         $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule310() {
         $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule311() {
         $this->semValue = new Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule312() {
         $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule313() {
         $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule314() {
         $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule315() {
         $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule316() {
         $this->semValue = new Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule317() {
         $this->semValue = new Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule318() {
         $this->semValue = new Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule319() {
         $this->semValue = new Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule320() {
         $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule321() {
         $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule322() {
         $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule323() {
         $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule324() {
         $this->semValue = new Expr\BinaryOp\Spaceship($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule325() {
         $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule326() {
         $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule327() {
         $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule328() {
         $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule329() {
         $this->semValue = new Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule330() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule331() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule332() {
         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule333() {
         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule334() {
         $this->semValue = new Expr\BinaryOp\Coalesce($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule335() {
         $this->semValue = new Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule336() {
         $this->semValue = new Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule337() {
         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule338() {
         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule339() {
         $this->semValue = new Expr\Eval_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule340() {
         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule341() {
         $this->semValue = new Expr\Include_($this->semStack[$this->stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule342() {
         $this->semValue = new Expr\Cast\Int_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule343() {
         $this->semValue = new Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule344() {
         $this->semValue = new Expr\Cast\String_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule345() {
         $this->semValue = new Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule346() {
         $this->semValue = new Expr\Cast\Object_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule347() {
         $this->semValue = new Expr\Cast\Bool_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule348() {
         $this->semValue = new Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule349() {
         $this->semValue = new Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule350() {
         $this->semValue = new Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule351() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule352() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule353() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule354() {
         $this->semValue = new Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule355() {
         $this->semValue = new Expr\Print_($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule356() {
         $this->semValue = new Expr\Yield_(null, null, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule357() {
         $this->semValue = new Expr\YieldFrom($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule358() {
         $this->semValue = new Expr\Closure(['static' => false, 'byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-4)], 'uses' => $this->semStack[$this->stackPos-(10-6)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]], $this->startAttributeStack[$this->stackPos-(10-1)] + $this->endAttributes);
    }

    protected function reduceRule359() {
         $this->semValue = new Expr\Closure(['static' => true, 'byRef' => $this->semStack[$this->stackPos-(11-3)], 'params' => $this->semStack[$this->stackPos-(11-5)], 'uses' => $this->semStack[$this->stackPos-(11-7)], 'returnType' => $this->semStack[$this->stackPos-(11-8)], 'stmts' => $this->semStack[$this->stackPos-(11-10)]], $this->startAttributeStack[$this->stackPos-(11-1)] + $this->endAttributes);
    }

    protected function reduceRule360() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule361() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule362() {
         $this->semValue = new Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule363() {
         $this->semValue = new Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule364() {
         $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule365() {
         $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule366() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule367() {
         $this->semValue = new Expr\ArrayDimFetch(new Scalar\String_(Scalar\String_::parse($this->semStack[$this->stackPos-(4-1)], false), $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule368() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule369() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule370() {
         $this->semValue = array(new Stmt\Class_(null, ['type' => 0, 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]], $this->startAttributeStack[$this->stackPos-(7-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(7-2)]);
    }

    protected function reduceRule371() {
         $this->semValue = new Expr\New_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule372() {
         list($class, $ctorArgs) = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = new Expr\New_($class, $ctorArgs, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule373() {
         $this->semValue = array();
    }

    protected function reduceRule374() {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)];
    }

    protected function reduceRule375() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule376() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule377() {
         $this->semValue = new Expr\ClosureUse(substr($this->semStack[$this->stackPos-(2-2)], 1), $this->semStack[$this->stackPos-(2-1)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule378() {
         $this->semValue = new Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule379() {
         $this->semValue = new Expr\StaticCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule380() {
         $this->semValue = new Expr\StaticCall($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-4)], $this->semStack[$this->stackPos-(6-6)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule381() {

            if ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
                $this->semValue = new Expr\StaticCall($this->semStack[$this->stackPos-(2-1)]->class, new Expr\Variable($this->semStack[$this->stackPos-(2-1)]->name, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
            } elseif ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
                $tmp = $this->semStack[$this->stackPos-(2-1)];
                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->semValue = new Expr\StaticCall($tmp->var->class, $this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
                $tmp->var = new Expr\Variable($tmp->var->name, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
            } else {
                throw new \Exception;
            }

    }

    protected function reduceRule382() {
         $this->semValue = new Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule383() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule384() {
         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule385() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule386() {
         $this->semValue = new Name($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule387() {
         $this->semValue = new Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule388() {
         $this->semValue = new Name\Relative($this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule389() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule390() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule391() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule392() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule393() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule394() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule395() {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule396() {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule397() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule398() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule399() {
         $this->semValue = null;
    }

    protected function reduceRule400() {
         $this->semValue = null;
    }

    protected function reduceRule401() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule402() {
         $this->semValue = array();
    }

    protected function reduceRule403() {
         $this->semValue = array(Scalar\String_::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`', false));
    }

    protected function reduceRule404() {
         foreach ($this->semStack[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '`', false); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule405() {
         $this->semValue = array();
    }

    protected function reduceRule406() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule407() {
         $this->semValue = new Scalar\LNumber(Scalar\LNumber::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule408() {
         $this->semValue = new Scalar\DNumber(Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule409() {
         $this->semValue = new Scalar\String_(Scalar\String_::parse($this->semStack[$this->stackPos-(1-1)], false), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule410() {
         $this->semValue = new Scalar\MagicConst\Line($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule411() {
         $this->semValue = new Scalar\MagicConst\File($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule412() {
         $this->semValue = new Scalar\MagicConst\Dir($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule413() {
         $this->semValue = new Scalar\MagicConst\Class_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule414() {
         $this->semValue = new Scalar\MagicConst\Trait_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule415() {
         $this->semValue = new Scalar\MagicConst\Method($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule416() {
         $this->semValue = new Scalar\MagicConst\Function_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule417() {
         $this->semValue = new Scalar\MagicConst\Namespace_($this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule418() {
         $this->semValue = new Scalar\String_(Scalar\String_::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], false), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule419() {
         $this->semValue = new Scalar\String_('', $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule420() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule421() {
         $this->semValue = new Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule422() {
         $this->semValue = new Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule423() {
         $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule424() {
         $this->semValue = new Expr\Array_($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule425() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule426() {
         $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule427() {
         $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule428() {
         $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule429() {
         $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule430() {
         $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule431() {
         $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule432() {
         $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule433() {
         $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule434() {
         $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule435() {
         $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule436() {
         $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule437() {
         $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule438() {
         $this->semValue = new Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule439() {
         $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule440() {
         $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule441() {
         $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule442() {
         $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule443() {
         $this->semValue = new Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule444() {
         $this->semValue = new Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule445() {
         $this->semValue = new Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule446() {
         $this->semValue = new Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule447() {
         $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule448() {
         $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule449() {
         $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule450() {
         $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule451() {
         $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule452() {
         $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule453() {
         $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule454() {
         $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule455() {
         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $this->startAttributeStack[$this->stackPos-(5-1)] + $this->endAttributes);
    }

    protected function reduceRule456() {
         $this->semValue = new Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule457() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule458() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule459() {
         $this->semValue = new Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule460() {
         $this->semValue = new Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule461() {
         $this->semValue = new Expr\Comment($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule462() {
         $this->semValue = new Expr\Comment($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule463() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule464() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule465() {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '"', false); } }; $this->semValue = new Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule466() {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, null, false); } } $s = preg_replace('~(\r\n|\n|\r)\z~', '', $s); if ('' === $s) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule467() {
         $this->semValue = array();
    }

    protected function reduceRule468() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule469() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule470() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule471() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule472() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule473() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule474() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule475() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule476() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule477() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule478() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule479() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule480() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule481() {
         $this->semValue = new Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule482() {
         $this->semValue = new Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule483() {
         $this->semValue = new Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule484() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule485() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule486() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule487() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule488() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule489() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(2-2)], $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule490() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule491() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule492() {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule493() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule494() {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], substr($this->semStack[$this->stackPos-(3-3)], 1), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule495() {
         $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-5)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule496() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule497() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule498() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule499() {
         $this->semValue = new Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule500() {
         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule501() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule502() {
         $this->semValue = null;
    }

    protected function reduceRule503() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule504() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule505() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule506() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule507() {
         $this->semValue = new Expr\List_($this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule508() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule509() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule510() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule511() {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)];
    }

    protected function reduceRule512() {
         $this->semValue = null;
    }

    protected function reduceRule513() {
         $this->semValue = array();
    }

    protected function reduceRule514() {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule515() {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)];
    }

    protected function reduceRule516() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule517() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule518() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule519() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule520() {
         $this->semValue = new Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $this->startAttributeStack[$this->stackPos-(2-1)] + $this->endAttributes);
    }

    protected function reduceRule521() {
         $this->semValue = new Scalar\String_($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule522() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule523() {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)];
    }

    protected function reduceRule524() {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]);
    }

    protected function reduceRule525() {
         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]);
    }

    protected function reduceRule526() {
         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule527() {
         $this->semValue = new Expr\ArrayDimFetch(new Expr\Variable(substr($this->semStack[$this->stackPos-(4-1)], 1), $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(4-3)], $this->startAttributeStack[$this->stackPos-(4-1)] + $this->endAttributes);
    }

    protected function reduceRule528() {
         $this->semValue = new Expr\PropertyFetch(new Expr\Variable(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(3-3)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule529() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule530() {
         $this->semValue = new Expr\Variable($this->semStack[$this->stackPos-(3-2)], $this->startAttributeStack[$this->stackPos-(3-1)] + $this->endAttributes);
    }

    protected function reduceRule531() {
         $this->semValue = new Expr\ArrayDimFetch(new Expr\Variable($this->semStack[$this->stackPos-(6-2)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes), $this->semStack[$this->stackPos-(6-4)], $this->startAttributeStack[$this->stackPos-(6-1)] + $this->endAttributes);
    }

    protected function reduceRule532() {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)];
    }

    protected function reduceRule533() {
         $this->semValue = new Scalar\String_($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule534() {
         $this->semValue = new Scalar\String_($this->semStack[$this->stackPos-(1-1)], $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }

    protected function reduceRule535() {
         $this->semValue = new Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $this->startAttributeStack[$this->stackPos-(1-1)] + $this->endAttributes);
    }
}
